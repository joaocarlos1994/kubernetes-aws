Monitoring a Kubernetes Cluster with Prometheus and Grafana

What is Helm?

Helm helps you manage Kubernetes applications â€” 
Helm Charts help you define, install, and upgrade 
even the most complex Kubernetes application.

To install helm using the following commad:

1 - Download the latest version of Helm. For example:

    wget https://get.helm.sh/helm-v2.16.10-linux-amd64.tar.gz

2 - Decompress the downloaded file:

    tar zxvf helm-v2.16.10-linux-amd64.tar.gz

3 - Move the file linux-amd64 to local/bin:

    mv linux-amd64/helm /usr/local/bin/

4 - Initialize the Helm on EKS Cluster using the following commad:

    helm init

5 - Fixing the Helm priviledges on default name spaces, use the following commads:

    - kubectl create serviceaccount --namespace kube-system tiller

    - kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller

    - kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'

6 - It is advice to install Prometheus using heml package following the link below:

    - https://github.com/helm/charts/tree/master/stable/prometheus-operator

    - helm install --name monitoring --namespace monitoring stable/prometheus-operator

7 - It is necessary to edit an exists services to get Prometheus information because the
    helm package instalation is configured as ClusterIP (Not necessary step):

    - kubectl edit -n monitoring service/monitoring-prometheus-oper-prometheus

    - Edit the services type to LoadBalancer, if you're using Minikube you only change to
    NodePort. Examples:

    For AWS:

            selector:
                app: prometheus
                prometheus: monitoring-prometheus-oper-prometheus
            sessionAffinity: None
            type: LoadBalancer
        status:
            loadBalancer: {}

    For Minikube:

            selector:
                app: prometheus
                prometheus: monitoring-prometheus-oper-prometheus
            sessionAffinity: None
            type: NodePort
        status:
            loadBalancer: {}


7 - It is necessary to edit an exists services to get Grafana interface because the
    helm package instalation is configured as ClusterIP:    

    - kubectl edit -n monitoring service/monitoring-grafana

    For AWS:

            selector:
                app.kubernetes.io/instance: monitoring
                app.kubernetes.io/name: grafana
            sessionAffinity: None
            type: LoadBalancer

    For Minikube:

            selector:
                app.kubernetes.io/instance: monitoring
                app.kubernetes.io/name: grafana
            sessionAffinity: None
            type: NodePort            
        






